{"version":3,"file":"static/js/984.511a2e28.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  gap: 5px;\n  flex-direction: column;\n  justify-content: center;\n  padding: 15px;\n  width: 300px;\n  border: 1px solid gray;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n  width: 100px;\n  height: 40px;\n  font-size: 16px;\n  text-align: center;\n  color: #fff;\n  margin-top: 10px;\n  background-color: #2196f3;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  border-radius: 5px;\n  border: none;\n  :hover,\n  :focus {\n    background-color: blue;\n    color: white;\n  }\n`;\nexport const FieldStyled = styled(Field)`\n  outline: none;\n  padding: 5px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectAllContacts = state => state.contacts.contacts;\n\nexport const selectAllFilters = state => state.filter;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectAllContacts, selectAllFilters],\n  (contacts, filters) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filters.toLowerCase().trim())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { FormStyled, Button, FieldStyled, Label } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst validationContacts = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(6, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n  const onHandleSubmit = (data, { resetForm }) => {\n    const contact = {\n      id: nanoid(),\n      name: data.name,\n      number: data.number,\n    };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      toast.error(`${data.name} is already in contacts!`);\n      return;\n    }\n    dispatch(addContact(contact));\n    toast.success(`Successfully ${data.name} added!`);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationContacts}\n      onSubmit={onHandleSubmit}\n    >\n      <FormStyled>\n        <Label htmlFor=\"name\">\n          <span>Name</span>\n          <FieldStyled\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label htmlFor=\"number\">\n          <span>Number</span>\n          <FieldStyled\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledItem = styled.li`\n  margin: 5px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 20px;\n`;\n\nexport const StyledBtn = styled.button`\n  width: 70px;\n  height: 20px;\n  font-size: 14px;\n  text-align: center;\n  color: #fff;\n\n  background-color: #2196f3;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  border-radius: 5px;\n  border: none;\n  :hover,\n  :focus {\n    background-color: blue;\n    color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledItem, StyledBtn } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number, onDelete }) => {\n  return (\n    <StyledItem>\n      {name} : {number}\n      <StyledBtn onClick={() => onDelete(id)} type=\"button\">\n        Delete\n      </StyledBtn>\n    </StyledItem>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  list-style-type: circle;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Wrapper = styled.div`\n  width: 500px;\n  margin: 0;\n  border: 1px solid gray;\n  padding: 20px;\n`;\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport { StyledList, Wrapper } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectAllContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { toast } from 'react-hot-toast';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const deleteContacts = id => {\n    dispatch(deleteContact(id));\n    const deleteToast = contacts.find(contact => contact.id === id);\n\n    toast.success(\n      `${deleteToast.name} is deleted from the contacts list of phonebook!`\n    );\n  };\n\n  return (\n    <Wrapper>\n      <StyledList>\n        {visibleContacts.map(({ id, name, number }) => {\n          return (\n            <ContactItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              onDelete={deleteContacts}\n            />\n          );\n        })}\n      </StyledList>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SectionFilter = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 330px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  font-size: 20px;\n`;\nexport const FilterFind = styled.p`\n  margin: 10px;\n`;\nexport const InputFilter = styled.input`\n  outline: none;\n  margin: 0;\n  border: 1px solid gray;\n  padding: 20px;\n  font-size: 20px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterContacts } from 'redux/contacts/filtersSlice';\nimport { SectionFilter, FilterFind, InputFilter } from './Filter.styled';\nimport { selectAllFilters } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filters = useSelector(selectAllFilters);\n  const dispatch = useDispatch();\n\n  const changeInputValue = evt => {\n    const inputValue = evt.currentTarget.value;\n    dispatch(setFilterContacts(inputValue));\n  };\n\n  return (\n    <SectionFilter>\n      <FilterFind>Find contacts by name</FilterFind>\n      <InputFilter type=\"text\" value={filters} onChange={changeInputValue} />\n    </SectionFilter>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectAllContacts } from 'redux/contacts/selectors';\nimport { Filter } from '../components/Filter/Filter.jsx';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectAllContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts:</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      {contacts.length > 0 && <ContactList />}\n    </>\n  );\n}\n"],"names":["FormStyled","styled","Form","Label","Button","FieldStyled","Field","selectAllContacts","state","contacts","selectAllFilters","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filters","contact","name","toLowerCase","includes","trim","validationContacts","Yup","shape","min","max","required","number","matches","initialValues","ContactForm","useSelector","dispatch","useDispatch","validationSchema","onSubmit","data","resetForm","id","nanoid","find","toast","addContact","htmlFor","type","pattern","title","StyledItem","StyledBtn","ContactItem","onDelete","onClick","StyledList","Wrapper","ContactList","visibleContacts","deleteContacts","deleteContact","deleteToast","map","SectionFilter","FilterFind","InputFilter","Filter","value","onChange","evt","inputValue","currentTarget","setFilterContacts","Contacts","useEffect","fetchContacts","Helmet","length"],"sourceRoot":""}